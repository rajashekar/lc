name: Development Tests (Cost Optimized)

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test-linux-only:
    name: Test Linux (Cost Optimized)
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-stable-
            ${{ runner.os }}-cargo-
      
      - name: Build
        run: cargo build --release
      
      - name: Run tests
        run: cargo test --release
      
      - name: Run PDF tests with feature
        run: cargo test --release --features pdf pdf_reader_tests
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Test binary execution
        run: |
          ./target/release/lc --version
          ./target/release/lc --help
          ./target/release/lc providers list || true
          ./target/release/lc config path

  cross-compile-minimal:
    name: Cross-compile (Essential Only)
    runs-on: ubuntu-22.04
    timeout-minutes: 20
    needs: test-linux-only  # Only run if basic tests pass
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cross
        run: cargo install cross
      - name: Cross-compile ARM64 (most important target)
        run: cross build --release --target aarch64-unknown-linux-gnu

  security-audit:
    name: Security Audit
    runs-on: ubuntu-22.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cargo-audit
      - run: cargo audit
