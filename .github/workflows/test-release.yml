name: Test Release Builds

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test-builds:
    name: Test ${{ matrix.os }} / ${{ matrix.rust }}
    timeout-minutes: 60  # Prevent runaway jobs
    strategy:
      fail-fast: true  # Stop on first failure to save costs
      matrix:
        include:
          # Test oldest supported Rust version - LINUX ONLY (cheapest)
          - os: ubuntu-22.04
            rust: "1.88.0"
            target: x86_64-unknown-linux-gnu
            
          # Test stable - LINUX ONLY for cost efficiency
          - os: ubuntu-22.04
            rust: stable
            target: x86_64-unknown-linux-gnu
            
          # Only ONE macOS job (most expensive) - remove macOS-12 to save ~$7
          - os: macos-13
            rust: stable
            target: aarch64-apple-darwin
            
          # Only ONE Windows job - save ~$2 by removing windows-2022 duplicate
          - os: windows-2022
            rust: stable
            target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ matrix.rust }}-
            ${{ runner.os }}-cargo-
      
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Run tests
        run: cargo test --release --target ${{ matrix.target }} -- --test-threads=1
      
      - name: Check formatting
        if: matrix.rust == 'stable'
        run: cargo fmt -- --check
      
      - name: Run clippy
        if: matrix.rust == 'stable'
        run: cargo clippy --all-targets --all-features -- -D warnings
      
      - name: Test binary execution
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ./target/${{ matrix.target }}/release/lc.exe --version
            ./target/${{ matrix.target }}/release/lc.exe --help
          else
            ./target/${{ matrix.target }}/release/lc --version
            ./target/${{ matrix.target }}/release/lc --help
          fi
        shell: bash
      
      - name: Integration tests
        run: |
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            export LC_BIN="./target/${{ matrix.target }}/release/lc.exe"
          else
            export LC_BIN="./target/${{ matrix.target }}/release/lc"
          fi
          
          # Test basic commands
          $LC_BIN providers list || true
          $LC_BIN config path
          $LC_BIN models info || true
        shell: bash

  cross-compile:
    name: Cross-compile ${{ matrix.target }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cross
      - run: cross build --release --target ${{ matrix.target }}

  package-test:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            package: deb
          - os: macos-latest
            package: homebrew
          - os: windows-latest
            package: scoop
    steps:
      - uses: actions/checkout@v4
      
      - name: Build release binary
        run: cargo build --release
      
      - name: Test Debian package
        if: matrix.package == 'deb'
        run: |
          # Create simple .deb package for testing
          mkdir -p debian/usr/bin
          cp target/release/lc debian/usr/bin/
          # Additional debian packaging steps would go here
      
      - name: Test Homebrew formula
        if: matrix.package == 'homebrew'
        run: |
          # Test that the formula is valid
          brew tap --force ${{ github.repository_owner }}/tap || true
          # Formula validation would go here
      
      - name: Test Scoop manifest
        if: matrix.package == 'scoop'
        run: |
          # Test that the manifest is valid JSON
          if (Test-Path "scoop/lc.json") {
            $json = Get-Content "scoop/lc.json" | ConvertFrom-Json
            Write-Host "Scoop manifest is valid JSON"
          }
        shell: pwsh

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install cargo-audit
      - run: cargo audit